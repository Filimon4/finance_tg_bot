from asyncio.log import logger
import json
import re
from aiogram import F
from src.modules.currency.index import CurrencyEnum
from src.modules.excelReportGenerator.index import ExcelReportGenerator
from src.modules.finance.types import OperationType
from src.modules.finance.cashAccounts.cashAccountRepository import CashAccountRepository
from src.modules.finance.categories.catogoriesRepository import CategoryRepository
from src.modules.finance.operations.operationsRepository import OperationCreateDTO, OperationsRepository
from src.db.index import DB
from src.modules.accounts.accountsRepository import AccountRepository
from src.telegramBot import (
    BotDispatcher,
    BotTgCommands,
    Reminder
)
from aiogram.filters import Command
from aiogram.types import (
    Message,
    WebAppData,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from sqlalchemy.exc import SQLAlchemyError

from src.telegramBot.system.currency.index import CurrencySys
from src.telegramBot.config.consts.KeyboardButtons import InlineKeyboardButtons, KeyboardButtons


@BotDispatcher.message(Command(commands=BotTgCommands.START.value))
async def start(message: Message):
    tg_id = message.from_user.id
    if not tg_id:
        return
    with DB.get_session() as session:
        AccountRepository.getOrCreateUserById(session, tg_id)
    await message.answer(text="–°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")

@BotDispatcher.message(Command(commands=BotTgCommands.EXPORT.value))
async def export(message: Message):
    try:
        user_id = message.from_user.id
        text = message.text.strip()
        if not user_id or len(text) <= 0:
            raise Exception('Invalid user_id or text')
        await ExcelReportGenerator.on_command_export(user_id, text)
    except Exception as e:
        await message.answer(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")

@BotDispatcher.message(F.text.regexp(r"^[+-]\s*\d+(\.\d+)?"))
async def inline_operations(message: Message):
    try:
        userid = message.from_user.id
        with DB.get_session() as session:
            sign, amount, category = message.text.split(" ")[0:3]
            user = AccountRepository.getUserById(session, userid)
            category = CategoryRepository.getByName(session, category)
            cashAccount = CashAccountRepository.getMain(session, user.id)

            data = OperationCreateDTO(
                account_id=user.id,
                amount=amount,
                category_id=category.id,
                cash_account_id=cashAccount.id,
                description='',
                name='',
                type=OperationType.INCOME if sign == '+' else OperationType.EXPENSIVE,
                to_cash_account_id=None,
            )
            operation = OperationsRepository.create(session,data)
            if not operation: raise Exception('Faile to create operation')

        await message.answer(text='–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞')
    except SQLAlchemyError as e:
        await message.answer(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    except Exception as e:
        await message.answer(text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏")


@BotDispatcher.message(Command(commands=BotTgCommands.CHECK_ALL_REMINDERS.value))
async def send_all_reminders(message: Message):
    try:
        await Reminder.startFetching()
        await message.answer(text='–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
    except SQLAlchemyError as e:
        await message.answer(text=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    except Exception as e:
        await message.answer(text=f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

@BotDispatcher.message(Command(commands=BotTgCommands.UPDTATE_ALL_CURRENCY.value))
async def update_all_currency(message: Message):
    try:
        await message.answer(text='–û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã –∏ –∫—É—Ä—Å—ã...')
        CurrencySys.updateAllApi()
    except SQLAlchemyError as e:
        await message.answer(text=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç")
    except Exception as e:
        await message.answer(text=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç")

@BotDispatcher.message(Command(commands=BotTgCommands.UPDTATE_CURRENCY.value))
async def update_currency(message: Message):
    try:
        args = message.text.strip().split(" ")
        if len(args) <= 1:
            await message.answer(text="–ù–µ —É–∫–∞–∑–∞–Ω api")
            text = "\n".join(CurrencyEnum.get_list())
            await message.answer(text=f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö API: \n{text}")
            return
        api_type=args[1]
        await message.answer(text='–û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—ã...')
        CurrencySys.updateApiCurrencies(api_type)
        await message.answer(text=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã {api_type} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except SQLAlchemyError as e:
        logger.error(f"{str(e)}")
        await message.answer(text=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç")
    except Exception as e:
        logger.error(f"{str(e)}")
        await message.answer(text=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç")

@BotDispatcher.message(Command(commands=BotTgCommands.UPDATE_CURRENCY_RATES.value))
async def update_currency_rates(message: Message):
    try:
        args = message.text.strip().split(" ")
        if len(args) <= 1:
            await message.answer(text="–ù–µ —É–∫–∞–∑–∞–Ω api")
            text = "\n".join(CurrencyEnum.get_list())
            await message.answer(text=f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö API: \n{text}")
            return
        api_type=args[1]
        await message.answer(text='–û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...')
        CurrencySys.updateApiRates(api_type)
        await message.answer(text=f"–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç {api_type} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    except SQLAlchemyError as e:
        logger.error(f"{str(e)}")
        await message.answer(text=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤")
    except Exception as e:
        logger.error(f"{str(e)}")
        await message.answer(text=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤")

@BotDispatcher.message(Command(commands=BotTgCommands.ALL_THIRD_APIS.value))
async def send_all_apies(message: Message):
    try:
        text = "\n".join(CurrencyEnum.get_list())
        await message.answer(text=f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö API: \n{text}")
    except SQLAlchemyError as e:
        logger.error(f"{str(e)}")
        await message.answer(text=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö apis")
    except Exception as e:
        logger.error(f"{str(e)}")
        await message.answer(text=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö apis")

@BotDispatcher.message(Command(commands=BotTgCommands.API_STATUS.value))
async def send_api_status(message: Message):
    try:
        args = message.text.strip().split(" ")
        if len(args) <= 1:
            await message.answer(text="–ù–µ —É–∫–∞–∑–∞–Ω api")
            text = "\n".join(CurrencyEnum.get_list())
            await message.answer(text=f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö API: \n{text}")
            return
        api_type = args[1]
        text = CurrencySys.getApiStatus(api_type)
        await message.answer(text=f"–°—Ç–∞—Ç—É—Å {api_type}: \n{text}")
    except SQLAlchemyError as e:
        logger.error(f"{str(e)}")
        await message.answer(text=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö api —Å—Ç–∞—Ç—É—Å–æ–≤")
    except Exception as e:
        logger.error(f"{str(e)}")
        await message.answer(text=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö api —Å—Ç–∞—Ç—É—Å–æ–≤")


@BotDispatcher.message(Command(commands=BotTgCommands.HELP.value))
async def send_help(message: Message):
    try:
        # TODO: –ü–æ–º–µ–Ω—è—Ç—å –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏—Ç—Å—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
        help_text = (
            "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "üîπ /start ‚Äî –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "üîπ /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
            "üîπ /export ‚Äî –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
            # "üîπ /check_all_reminders ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            # "üîπ /updtate_all_currency ‚Äî –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –≤–∞–ª—é—Ç—ã (–µ—Å—Ç—å –æ–ø–µ—á–∞—Ç–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)\n"
            # "üîπ /update_currency ‚Äî –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–∞–ª—é—Ç—É\n"
            # "üîπ /update_currency_rates ‚Äî –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
            # "üîπ /all_third_apis ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ API\n"
            # "üîπ /api_status ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å API\n\n"
            "‚ÑπÔ∏è –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Å —Å–∏–º–≤–æ–ª–æ–º '/' –≤ –Ω–∞—á–∞–ª–µ.\n"
        )

        buttons = InlineKeyboardButtons[BotTgCommands.HELP]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await message.answer(text=help_text, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"{str(e)}")
        await message.answer(text=f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –ø–æ–º–æ—â–∏")

@BotDispatcher.callback_query()
async def handle_callback(callback_query: CallbackQuery):
    data = callback_query.data

    print(data)
    
    await callback_query.answer()